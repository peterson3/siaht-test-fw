using MahApps.Metro.Controls;
using MahApps.Metro.Controls.Dialogs;
using System;
using System.Threading.Tasks;
using System.Windows;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Windows.Controls;
using UI_test_player_TD.Model;
using System.IO;
using System.Diagnostics;
using TopDown_QA_FrameWork;
using TopDown_QA_FrameWork.Geradores;
using UI_test_player_TD.Controllers;
using Microsoft.Win32;
using UI_test_player_TD.Views;
using MahApps.Metro.SimpleChildWindow;
using UI_test_player_TD.DB;
using Oracle.DataAccess.Client;

namespace UI_test_player_TD
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : MetroWindow
    {
        MainController mainController;
        TestCaseView testCaseView;
        SettingsView settingsView;
        TestSuiteView testSuiteView;
        LogView logView;
        AcoesView acoesView;
        SysView sistemasView;
        TelasView telasView;

        public MainWindow()
        {
            InitializeComponent();
            mainController = new MainController(this);
            testCaseView = mainController.getTestCaseView();
            this.refreshContent(testCaseView);
 
        }

        private void OpenBrowser(object sender, RoutedEventArgs e)
        {
            mainController.OpenBrowser();
        }

        public void refreshContent(UserControl uc)
        {
            transitioning.Content = uc;
        }

        public void showMessage(string title, string message)
        {
            Dispatcher.Invoke(() =>
            {
                this.ShowMessageAsync(title, message);
            });
        }

        public void changeTitle(string newTitle)
        {
            this.titleBarNew.Text = newTitle;
        }

        public Task<MessageDialogResult> showQuestion(string title, string message)
        {
           return this.ShowMessageAsync(title, message, MessageDialogStyle.AffirmativeAndNegative);

        }

        public Task<ProgressDialogController> showLoadingDialog(string title, string message)
        {
            return this.ShowProgressAsync(title, message);
        }

        private void OpenSettings(object sender, RoutedEventArgs e)
        {
            Logger.escrever(Settings.ctfsPath);
            settingsView = mainController.getSettingsView();
            this.refreshContent(settingsView);

        }

        private void OpenTestCaseEdit(object sender, RoutedEventArgs e)
        {
            testCaseView = mainController.getTestCaseView();
            this.refreshContent(testCaseView);

        }

        private void OpenTestSuiteEdit(object sender, RoutedEventArgs e)
        {
            testSuiteView = mainController.getTestSuiteView();
            this.refreshContent(testSuiteView);
        }

        private void AutoGenerateDataFile(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Não Implementado..");
        }

        private void OpenLogView(object sender, RoutedEventArgs e)
        {
            logView = mainController.getLogView();
            this.refreshContent(logView);
        }

        private void AddTelaAcao(object sender, RoutedEventArgs e)
        {

        }

        private void OpenAcoesView(object sender, RoutedEventArgs e)
        {
            acoesView = mainController.getAcoesView();
            this.refreshContent(acoesView);
        }

        public void OpenSistemasView(object sender, RoutedEventArgs e)
        {
            sistemasView = mainController.getSistemasView();
            this.refreshContent(sistemasView);
        }

        private void OpenTelasView(object sender, RoutedEventArgs e)
        {
            telasView = mainController.getTelasView();
            this.refreshContent(telasView);
        }


        internal void FlyOutFeedBack(string p)
        {
            AppBar.IsOpen = true;
            AppBar.CloseButtonVisibility = System.Windows.Visibility.Hidden;
            AppBarTextBlock.Text = p;
        }


        public async void OpenSystemAddChildWindow(SysView parentWindow)
        {
            await this.ShowChildWindowAsync(new AddSysChildWindow(this, parentWindow) { IsModal = true });
        }


        public async void OpenTelaAddChildWindow(TelasView parentWindow)
        {
            await this.ShowChildWindowAsync(new AddTelaChildWindow(this, parentWindow) { IsModal = true });
        }

        public async void OpenAcaoEditChildWindow(AcoesView parentWindow, AcaoDyn acao)
        {
            await this.ShowChildWindowAsync(new EditAcaoChildWindow(this, parentWindow, acao) { IsModal = true });
        }

        public async void OpenAddAcaoChildWindow(AcoesView parentWindow)
        {
            await this.ShowChildWindowAsync(new AddAcaoChildWindow(this, parentWindow) { IsModal = true });
        }

        public async void OpenAddAcaoChildWindow(AcoesView parentWindow, Screen selectedTela, Sistema selectedSistema)
        {
            await this.ShowChildWindowAsync(new AddAcaoChildWindow(this, parentWindow, selectedTela, selectedSistema) { IsModal = true });

        }

        public async void OpenAddAcaoChildWindow(TestCaseView parentWindow, Screen selectedTela, Sistema selectedSistema)
        {
            await this.ShowChildWindowAsync(new AddAcaoChildWindow(this, parentWindow, selectedTela, selectedSistema) { IsModal = true });

        }

        public async void OpenAcaoEditChildWindow(TestCaseView parentWindow, AcaoDyn acao)
        {
            await this.ShowChildWindowAsync(new EditAcaoChildWindow(this, parentWindow, acao) { IsModal = true });
        }

        public async void OpenDetalhesPasso(TestCaseView parentWindow, PassoDoTeste passo)
        {
            await this.ShowChildWindowAsync(new DetalhesPassoChildWindow(this, parentWindow, passo) { IsModal = true });
        }


        public void OpenTestCaseViewWithSelectedCase(TestCase testCase)
        {
            testCaseView = mainController.getTestCaseView(testCase);
            this.refreshContent(testCaseView);
        }
    }
}
